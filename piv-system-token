#!/bin/bash -x
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2019, Joyent, Inc.
#

set -o pipefail
set -o xtrace

. /lib/svc/share/smf_include.sh

smf_is_globalzone || exit $SMF_EXIT_OK

fatal() {
	echo "fatal:" "$@" >&2
	/smartdc/lib/sdc-on-tty -d /dev/console \
	    echo "\nFatal error while setting up PIV crypto token:\n" "$@" \
	    "Logs for the 'piv-system-token' SMF service may have further" \
	    "details.\n"
	exit $SMF_EXIT_ERR_FATAL
}

stop() {
	echo "skipping unlock:" "$@" >&2
	exit $SMF_EXIT_OK
}

#
# If we booted in noimport mode, then don't do any unlocking.
#
/bin/bootparams | grep "^noimport=true" >/dev/null
if [[ $? -eq 0 ]]; then
	stop "system booted noimport mode"
fi

#
# We need dsk and usb devices.
#
/usr/sbin/devfsadm

#
# We have to start our own pcscd here temporarily, since /var/run hasn't been
# mounted over yet by fs-minimal. If we let the actual pcscd SMF service start
# now, that mount would hide its socket and make it useless later.
#
# So instead we start one just for unlocking here and then kill it when we
# exit.
#
/usr/sbin/amd64/pcscd --force-reader-polling || fatal "omg what"
while [[ ! -f /var/run/pcscd/pcscd.pid ]]; do
	sleep 0.1
done
pcscd_pid=$(cat /var/run/pcscd/pcscd.pid)

kill_pcscd() {
	kill $pcscd_pid
}
trap kill_pcscd EXIT

#
# If we're in a qemu VM with the emulated CCID device, after reboot it's often
# out of sync with us. Doing a list command will cause PCSC to reset it and
# bring it back into sync.
#
pivtool list >/dev/null 2>/dev/null

#
# Check for the system boot module. If we have this, it will tell us which
# PIV token to use and maybe the PIN for it.
#
if [[ -f /system/boot/piv-config.json ]]; then
	guid=$(json guid < /system/boot/piv-config.json)
	cardpubkey="$(json card-pubkey < /system/boot/piv-config.json)"
	pin=$(json pin < /system/boot/piv-config.json)

	if [[ -z "$guid" || -z "$cardpubkey" ]]; then
		fatal "Contents of boot module invalid"
	fi

	IFS=: read rdr rguid nochuid isyk ykver < <(pivtool -g "$guid" -p list)
	if [[ -z "$rguid" ]]; then
		fatal "PIV token '$guid' (pinned by boot module) could not" \
		    "be found."
	fi

	if ! pivtool -g "$guid" auth 9e < <(echo "$cardpubkey"); then
		fatal "Card authentication keys for '$rguid' (obtained from" \
		    "boot-time module) do not match"
	fi

	if [[ -z "$pin" ]]; then
		/smartdc/lib/sdc-on-tty -d /dev/console \
		    /smartdc/lib/piv-prompt-pin.sh "$rguid" "$rdr"
		if [[ $? -ne 0 ]]; then
			fatal "piv-prompt-pin failed"
		fi
		exit $SMF_EXIT_OK
	fi

	if ! pivtool -g "$guid" -P "$pin" set-system; then
		fatal "Failure while running 'set-system' command"
	fi
	exit $SMF_EXIT_OK
fi

try_kbmapi() {
	local uuid
	local kbmapi
	local url
	local l_guid="$1"
	local pin

	uuid=$(sysinfo -p | grep '^UUID=' | sed -e 's/^UUID=//' -e "s/'//g")

	# XXX: Hack
	kbmapi=$(bootparams | \
	    awk -F: '$1 ~ /^rabbitmq_dns/ { print $3 }' | \
	    sed 's/rabbitmq/kbmapi/')

	url="http://$kbmapi/pivtokens/$l_guid/pin"
	pin=$(curl -sS "$url" | json pin)
	[[ -z "$pin" ]] && return 1

	if ! pivtool -g "$l_guid" -P "$pin" set-system; then
		fatal "Failure while running 'set-system' command"
	fi

    return 0
}

#
# If that didn't work, look in the ZFS pool to see if we have a local-box
# set at the pool root. If we do, we're using pool-wide encryption and we can
# get the GUID and public key of the token from that.
#
export_pool() {
	zpool export zones
}
zpool import -N -o readonly=on zones
if [[ $? -eq 0 ]]; then
	trap export_pool EXIT
fi

health=$(zpool get -pH -o value health zones)
if [[ ! -z "$health" && "$health" != "-" ]]; then
	guid="$(zfs get -pH -o value rfd77:piv-guid zones)"
	cardpubkey="$(zfs get -pH -o value rfd77:piv-9e zones)"
	if [[ ! -z "$guid" && "$guid" != "-" ]]; then
		IFS=: read rdr rguid nochuid isyk ykver \
		    < <(pivtool -g "$guid" -p list)

		if [[ -z "$rguid" ]]; then
			fatal "PIV token '$guid' (pinned by ZFS prop) could" \
			    "not be found."
		fi

		if [[ ! -z "$cardpubkey" && "$cardpubkey" != "-" ]]; then
			if ! pivtool -g "$guid" auth 9e \
			    < <(echo "$cardpubkey"); then
				fatal "Card authentication keys do not match"
			fi
		else
			echo "warning: no card public key pinned in zfs props"
		fi

		if try_kbmapi "$rguid"; then
			exit $SMF_EXIT_OK
		else
			smf_console "Could not obtain PIN for token $guid from KBMAPI"
		fi

		/smartdc/lib/sdc-on-tty -d /dev/console \
		    /smartdc/lib/piv-prompt-pin.sh "$rguid" "$rdr"
		if [[ $? -ne 0 ]]; then
			fatal "piv-prompt-pin failed"
		fi
		exit $SMF_EXIT_OK
	fi

	box="$(zfs get -pH -o value rfd77:local-box zones)"
	if [[ ! -z "$box" && "$box" != "-" ]]; then
		boxinfo="$(echo "$box" | \
		    openssl enc -d -base64 | pivtool box-info)"
		guid="$(echo "$boxinfo" | \
		    awk -F': +' '$1 == "guid" { print $2; }')"

		if [[ ! -z "$guid" ]]; then
			IFS=: read rdr rguid nochuid isyk ykver \
			    < <(pivtool -g "$guid" -p list)

			if [[ -z "$rguid" ]]; then
				fatal "PIV token '$guid' (pinned by" \
				    "local-box) could not be found."
			fi

			/smartdc/lib/sdc-on-tty -d /dev/console \
			    /smartdc/lib/piv-prompt-pin.sh "$rguid" "$rdr"
			if [[ $? -ne 0 ]]; then
				fatal "piv-prompt-pin failed"
			fi
			exit $SMF_EXIT_OK
		fi
	fi
fi


stop "No properties or boot modules found to pin system token."
